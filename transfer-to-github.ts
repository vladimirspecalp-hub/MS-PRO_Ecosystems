import { Octokit } from '@octokit/rest';
import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

let connectionSettings: any;

async function getAccessToken() {
  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {
    return connectionSettings.settings.access_token;
  }
  
  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME
  const xReplitToken = process.env.REPL_IDENTITY 
    ? 'repl ' + process.env.REPL_IDENTITY 
    : process.env.WEB_REPL_RENEWAL 
    ? 'depl ' + process.env.WEB_REPL_RENEWAL 
    : null;

  if (!xReplitToken) {
    throw new Error('X_REPLIT_TOKEN not found for repl/depl');
  }

  connectionSettings = await fetch(
    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',
    {
      headers: {
        'Accept': 'application/json',
        'X_REPLIT_TOKEN': xReplitToken
      }
    }
  ).then(res => res.json()).then(data => data.items?.[0]);

  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;

  if (!connectionSettings || !accessToken) {
    throw new Error('GitHub not connected');
  }
  return accessToken;
}

async function getUncachableGitHubClient() {
  const accessToken = await getAccessToken();
  return new Octokit({ auth: accessToken });
}

async function transferProject() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ GitHub...\n');

    const octokit = await getUncachableGitHubClient();
    const owner = 'vladimirspecalp-hub';
    const repoName = 'MS-PRO_Ecosystems';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    let repoExists = false;
    try {
      await octokit.repos.get({ owner, repo: repoName });
      repoExists = true;
      console.log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${owner}/${repoName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } catch (error: any) {
      if (error.status === 404) {
        console.log(`üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${owner}/${repoName}...`);
        try {
          await octokit.repos.createForAuthenticatedUser({
            name: repoName,
            private: false,
            description: 'MS-PRO Ecosystems - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
            auto_init: false
          });
          console.log('‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        } catch (createError: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:', createError.message);
          throw createError;
        }
      } else {
        throw error;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è Git –æ–ø–µ—Ä–∞—Ü–∏–π
    const token = await getAccessToken();
    const repoUrl = `https://${token}@github.com/${owner}/${repoName}.git`;

    console.log('\nüì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    try {
      execSync('git rev-parse --git-dir', { stdio: 'ignore' });
      console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
      execSync('git init', { stdio: 'inherit' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    console.log('\nüìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å...');
    execSync('git add .', { stdio: 'inherit' });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...');
    try {
      execSync('git commit -m "Initial commit: MS-PRO Ecosystems project transfer"', { stdio: 'inherit' });
    } catch (error) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –∏–ª–∏ –∫–æ–º–º–∏—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤–µ—Ç–∫—É –≤ main
    console.log('\nüåø –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –≤ main...');
    try {
      execSync('git branch -M main', { stdio: 'inherit' });
    } catch (error) {
      console.log('‚ÑπÔ∏è  –í–µ—Ç–∫–∞ main —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π remote, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      execSync('git remote remove origin', { stdio: 'ignore' });
    } catch {
      // Remote –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π remote
    console.log('\nüîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
    execSync(`git remote add origin ${repoUrl}`, { stdio: 'inherit' });

    // –ü—É—à–∏–º –≤ GitHub
    console.log('\n‚¨ÜÔ∏è  –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ GitHub...');
    execSync('git push -u origin main --force', { stdio: 'inherit' });

    console.log('\n‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ GitHub!');
    console.log(`üìç URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: https://github.com/${owner}/${repoName}`);
    console.log('\nüìä –û—Ç—á—ë—Ç:');
    console.log(`   ‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü: ${owner}`);
    console.log(`   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoName}`);
    console.log(`   ‚úÖ –í–µ—Ç–∫–∞: main`);
    console.log(`   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);

  } catch (error: any) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    if (error.stack) {
      console.error(error.stack);
    }
    process.exit(1);
  }
}

transferProject();
